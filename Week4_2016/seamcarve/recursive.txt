1.   The algorithm uses dynamic programming when storing the values of the cost map. For each pixel that goes from the top row to the bottom row, the program will save the current cost at each pixel location. This means once we calculate the cumulative cost of a certain pixel for one calculation, we do not need to re-do all the recursive calls to do it again. Because each pixel will have its value called multiple times, this saves a lot of time in the long run. In addition, when we reach the bottom and find the lowest cost pixel, we will not have to recalculate the cost map for the pixels above and adjacent to it, and so forth until it gets on the top. Again, this increases the time efficiency monumentally via memoization.

2.  For pixel (i,j), we could use the equation M(i,j) = E(i,j) + min (M(i-1), j-1), M(i,j-1), M(i+1,j-1)) where M is the 2D array representing the cost and E is the saliency map. For our edge cases, we only look at pixels directly above and to the left/right depending if it's on the right/left edge. Using this, we could get the cost value of any pixel by taking its saliency and adding the minimum of the costs of the three adjacent pixels above it which then call for the minimum of the costs of the three adjacent pixels above that and so on until we reach the top row which is our base case. For our top row pixels, the saliency is equal to the cost so using these values (base cases), we can then retrace all our recursive calls and get a cost value for each pixel below the top row. To find out the x coordinates for the seam, we find the minimum cost in the last row (calculated recursively) and add its corresponding position to seam. For each row above the last row, we find the minimum of the cost values for the three adjacent pixels above it (calculated in the recursive manner described above) and add the corresponding position of the lowest cost value to seam. We do this until we reach the top row and after figuring the seam coordinate of the top row, we have a seam array that has all the right x-coordinates. 

3.	O(N *3^N)

4.	It would take approximately 3.59 * 10^25 seconds or 1.13 * 10^9 years. 
